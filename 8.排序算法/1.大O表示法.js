/*

时间复杂度：是指执行当前算法所消耗的时间

    O(1)                    常数的
    O(log(n))               对数的
    O(n)                    线性的
    O(n*log(n))             线性和对数乘积
    O(n^2)                  平方
    O(2^n)                  指数的


推导大O表示法的方式：
1.用常量1取代运算时间里的所有加法常量
2.在修改后的运算次数中，只保留最高项
3.如果最高项存在且与之相乘的常数不为1，则去除这个常数
2n^2 + 3n +1  =>  O(n^2)
  

空间复杂度：是指执行当前算法需要占用多少内存空间（包括临时开辟的额外空间）


如果算法执行所需要的临时空间不随着某个变量n的大小而变化，即此算法空间复杂度为一个常量，可表示为 O(1)
举例：
int i = 1;
int j = 2;
++i;
j++;
int m = i + j;


// 下面方法生成长度为n的数组，并添加元素，空间复杂度为O(n)
function genArr(n){
    let arr = []
    arr.length = n
    for (int i = 0; i < n; i++) {
        arr[i] = i * 2;
    }
}

// 如果是在循环中开辟数组
1 + 2 + 3 + 4 + 5 + n = n(n+1)/2 =  n^2/2 - n/2
空间复杂度为O(n^2)
for (int i = 0; i < n; i++) {
       let arr = []
       arr.length = n
}

*/
